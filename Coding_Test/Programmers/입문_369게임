# 나의풀이

function solution(order) {
    const boolen_arr = []
    const reference = [3,6,9]
    var myArr = String(order).split('').map((num) => {
       return Number(num)
    })
    for(let e of myArr){
        boolen_arr.push(reference.includes(e))
    }
    return boolen_arr.filter(Boolean).length;  
}


# 다른사람풀이
function solution(order) {
    return Array.from(order.toString()).filter((el) => ['3','6','9'].includes(el)).length  
}


=========
var answer=0;
function get_divisor_length(n){
    let divisor_arr = new Array()
    for(let i =1; i<=n/2; i++) {
        if( n % i === 0){
            divisor_arr.push(i) 
        }
    }
    divisor_arr.splice(divisor_arr.length, 0, n)
    if(divisor_arr.length >=3){
        answer += 1
    }     
}  

// 4부터 n까지의 수 각각의, 약수의 갯수가 나온다
function solution(n) {
    for(let i=4; i<=n; i++){         
        get_divisor_length(i)
        
    }    
    return answer
}
